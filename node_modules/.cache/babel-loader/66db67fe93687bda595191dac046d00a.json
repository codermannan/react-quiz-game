{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\class5\\\\quiz-apps\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport ScoreCard from './components/ScoreCard';\nimport shuffle from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [quizzes, setQuizzes] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [startQuiz, setStartQuiz] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentAnswers, setCurrentAnswers] = useState(null);\n  const [endGame, setEndGame] = useState(false);\n  const [totalScore, setTotalScore] = useState(0);\n  const [correctAnswer, setCorrectAnswer] = useState(null);\n  const [pickedAnswer, setPickedAnswer] = useState(null);\n\n  const pickAnswer = answer => {\n    setPickedAnswer(answer);\n\n    if (answer === correctAnswer) {\n      setTotalScore(prevTotal => prevTotal + 1);\n    }\n\n    console.log(\"totalScore\", totalScore);\n  };\n\n  const navigateNext = () => {\n    let currentQuizIndex = currentQuestionIndex + 1;\n    const validQuestionIndex = currentQuizIndex < quizzes.length; //console.log(\"prevIndex\",currentQuizIndex);\n\n    if (validQuestionIndex) {\n      setCurrentQuestionIndex(currentQuizIndex); //console.log(\"currentQuestionIndex\",currentQuestionIndex);\n\n      const nextAnswer = quizzes[currentQuizIndex]; //console.log(\"nextAnswer\",nextAnswer);\n\n      setCurrentAnswers(shuffle(nextAnswer));\n      setCorrectAnswer(nextAnswer.correct_answer);\n      setPickedAnswer(null);\n    } else {\n      setEndGame(true);\n    }\n  }; //console.log(currentQuestionIndex);\n\n\n  const fetchQuiz = async () => {\n    const res = await fetch(\"https://opentdb.com/api.php?amount=5&category=18&difficulty=easy&type=multiple\");\n    const {\n      results\n    } = await res.json();\n    console.log(results);\n    setQuizzes(results);\n    const initialQuestion = results[currentQuestionIndex]; //const answers = [initialQuestion.correct_answer,\n    // ...initialQuestion.incorrect_answers\n    //];\n    //////console.log(\"answers\",answers);\n\n    setCurrentAnswers(shuffle(initialQuestion));\n    setCorrectAnswer(initialQuestion.correct_answer); //console.log(\"cccccccccurrentAnswer\",currentAnswers);\n\n    setStartQuiz(true);\n    setLoaded(true);\n  };\n\n  const resetQuiz = () => {\n    console.log(1111111);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [endGame && /*#__PURE__*/_jsxDEV(ScoreCard, {\n      totalScore: totalScore,\n      resetQuiz: resetQuiz\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }, this), !startQuiz && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchQuiz,\n      style: {\n        display: 'block',\n        margin: '200px auto'\n      },\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: loaded && !endGame && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        pickAnswer: pickAnswer,\n        quiz: quizzes[currentQuestionIndex],\n        currentAnswers: currentAnswers,\n        currentQuestionIndex: currentQuestionIndex,\n        quizzes: quizzes,\n        navigateNext: navigateNext,\n        correctAnswer: correctAnswer,\n        pickedAnswer: pickedAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"XV7lmsJ7T1B6fnMj/oQmtPusDE4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","QuestionCard","ScoreCard","shuffle","App","quizzes","setQuizzes","loaded","setLoaded","startQuiz","setStartQuiz","currentQuestionIndex","setCurrentQuestionIndex","currentAnswers","setCurrentAnswers","endGame","setEndGame","totalScore","setTotalScore","correctAnswer","setCorrectAnswer","pickedAnswer","setPickedAnswer","pickAnswer","answer","prevTotal","console","log","navigateNext","currentQuizIndex","validQuestionIndex","length","nextAnswer","correct_answer","fetchQuiz","res","fetch","results","json","initialQuestion","resetQuiz","display","margin"],"sources":["E:/react/class5/quiz-apps/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport ScoreCard from './components/ScoreCard';\nimport shuffle from './utils';\n\n\nfunction App() {\n\n  const [quizzes, setQuizzes] = useState(null);\n  const [loaded,setLoaded] = useState(false);\n  const [startQuiz,setStartQuiz] = useState(false);\n  const [currentQuestionIndex,setCurrentQuestionIndex] = useState(0);\n  const [currentAnswers,setCurrentAnswers] = useState(null);\n  const [endGame,setEndGame] = useState(false);\n  const [totalScore,setTotalScore] = useState(0);\n  const [correctAnswer,setCorrectAnswer] = useState(null);\n  const [pickedAnswer,setPickedAnswer] = useState(null);\n\n  const pickAnswer = (answer) => {\n    setPickedAnswer(answer);\n    if(answer === correctAnswer){\n      setTotalScore((prevTotal)=> prevTotal + 1);\n    }\n    console.log(\"totalScore\",totalScore)\n  }\n\n  const navigateNext = () =>{\n    let currentQuizIndex = currentQuestionIndex + 1;\n    const validQuestionIndex = currentQuizIndex < quizzes.length;\n    //console.log(\"prevIndex\",currentQuizIndex);\n    if(validQuestionIndex){\n      setCurrentQuestionIndex(currentQuizIndex)\n      //console.log(\"currentQuestionIndex\",currentQuestionIndex);\n      const nextAnswer = quizzes[currentQuizIndex]\n      //console.log(\"nextAnswer\",nextAnswer);\n      setCurrentAnswers(shuffle(nextAnswer));\n      setCorrectAnswer(nextAnswer.correct_answer);\n      setPickedAnswer(null);\n    }else{\n      setEndGame(true);\n    }\n    \n  }\n\n  //console.log(currentQuestionIndex);\n  const fetchQuiz = async () => {\n      const res         = await fetch(\"https://opentdb.com/api.php?amount=5&category=18&difficulty=easy&type=multiple\");\n      const { results } = await res.json();\n      console.log(results);\n      setQuizzes(results);\n\n      const initialQuestion  = results[currentQuestionIndex];\n      //const answers = [initialQuestion.correct_answer,\n     // ...initialQuestion.incorrect_answers\n      //];\n      //////console.log(\"answers\",answers);\n      setCurrentAnswers(shuffle(initialQuestion));\n      setCorrectAnswer(initialQuestion.correct_answer);\n      //console.log(\"cccccccccurrentAnswer\",currentAnswers);\n      setStartQuiz(true);\n      setLoaded(true);\n  }\n\n  const resetQuiz = () => {\n    console.log(1111111);\n  }\n  return (\n    <>\n      {endGame && <ScoreCard totalScore={totalScore} resetQuiz={resetQuiz}/>}\n      { !startQuiz &&\n      <button onClick={fetchQuiz} style={{display:'block',margin:'200px auto'}}>Start Quiz</button>\n      }\n      <div className='container'>\n        {loaded && !endGame &&\n        <QuestionCard\n          pickAnswer={pickAnswer}\n          quiz={quizzes[currentQuestionIndex]} \n          currentAnswers={currentAnswers}\n          currentQuestionIndex={currentQuestionIndex}\n          quizzes={quizzes}\n          navigateNext={navigateNext}\n          correctAnswer={correctAnswer}\n          pickedAnswer={pickedAnswer}\n        />\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACO,MAAD,EAAQC,SAAR,IAAqBR,QAAQ,CAAC,KAAD,CAAnC;EACA,MAAM,CAACS,SAAD,EAAWC,YAAX,IAA2BV,QAAQ,CAAC,KAAD,CAAzC;EACA,MAAM,CAACW,oBAAD,EAAsBC,uBAAtB,IAAiDZ,QAAQ,CAAC,CAAD,CAA/D;EACA,MAAM,CAACa,cAAD,EAAgBC,iBAAhB,IAAqCd,QAAQ,CAAC,IAAD,CAAnD;EACA,MAAM,CAACe,OAAD,EAASC,UAAT,IAAuBhB,QAAQ,CAAC,KAAD,CAArC;EACA,MAAM,CAACiB,UAAD,EAAYC,aAAZ,IAA6BlB,QAAQ,CAAC,CAAD,CAA3C;EACA,MAAM,CAACmB,aAAD,EAAeC,gBAAf,IAAmCpB,QAAQ,CAAC,IAAD,CAAjD;EACA,MAAM,CAACqB,YAAD,EAAcC,eAAd,IAAiCtB,QAAQ,CAAC,IAAD,CAA/C;;EAEA,MAAMuB,UAAU,GAAIC,MAAD,IAAY;IAC7BF,eAAe,CAACE,MAAD,CAAf;;IACA,IAAGA,MAAM,KAAKL,aAAd,EAA4B;MAC1BD,aAAa,CAAEO,SAAD,IAAcA,SAAS,GAAG,CAA3B,CAAb;IACD;;IACDC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBV,UAAzB;EACD,CAND;;EAQA,MAAMW,YAAY,GAAG,MAAK;IACxB,IAAIC,gBAAgB,GAAGlB,oBAAoB,GAAG,CAA9C;IACA,MAAMmB,kBAAkB,GAAGD,gBAAgB,GAAGxB,OAAO,CAAC0B,MAAtD,CAFwB,CAGxB;;IACA,IAAGD,kBAAH,EAAsB;MACpBlB,uBAAuB,CAACiB,gBAAD,CAAvB,CADoB,CAEpB;;MACA,MAAMG,UAAU,GAAG3B,OAAO,CAACwB,gBAAD,CAA1B,CAHoB,CAIpB;;MACAf,iBAAiB,CAACX,OAAO,CAAC6B,UAAD,CAAR,CAAjB;MACAZ,gBAAgB,CAACY,UAAU,CAACC,cAAZ,CAAhB;MACAX,eAAe,CAAC,IAAD,CAAf;IACD,CARD,MAQK;MACHN,UAAU,CAAC,IAAD,CAAV;IACD;EAEF,CAhBD,CApBa,CAsCb;;;EACA,MAAMkB,SAAS,GAAG,YAAY;IAC1B,MAAMC,GAAG,GAAW,MAAMC,KAAK,CAAC,gFAAD,CAA/B;IACA,MAAM;MAAEC;IAAF,IAAc,MAAMF,GAAG,CAACG,IAAJ,EAA1B;IACAZ,OAAO,CAACC,GAAR,CAAYU,OAAZ;IACA/B,UAAU,CAAC+B,OAAD,CAAV;IAEA,MAAME,eAAe,GAAIF,OAAO,CAAC1B,oBAAD,CAAhC,CAN0B,CAO1B;IACD;IACC;IACA;;IACAG,iBAAiB,CAACX,OAAO,CAACoC,eAAD,CAAR,CAAjB;IACAnB,gBAAgB,CAACmB,eAAe,CAACN,cAAjB,CAAhB,CAZ0B,CAa1B;;IACAvB,YAAY,CAAC,IAAD,CAAZ;IACAF,SAAS,CAAC,IAAD,CAAT;EACH,CAhBD;;EAkBA,MAAMgC,SAAS,GAAG,MAAM;IACtBd,OAAO,CAACC,GAAR,CAAY,OAAZ;EACD,CAFD;;EAGA,oBACE;IAAA,WACGZ,OAAO,iBAAI,QAAC,SAAD;MAAW,UAAU,EAAEE,UAAvB;MAAmC,SAAS,EAAEuB;IAA9C;MAAA;MAAA;MAAA;IAAA,QADd,EAEI,CAAC/B,SAAD,iBACF;MAAQ,OAAO,EAAEyB,SAAjB;MAA4B,KAAK,EAAE;QAACO,OAAO,EAAC,OAAT;QAAiBC,MAAM,EAAC;MAAxB,CAAnC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAKE;MAAK,SAAS,EAAC,WAAf;MAAA,UACGnC,MAAM,IAAI,CAACQ,OAAX,iBACD,QAAC,YAAD;QACE,UAAU,EAAEQ,UADd;QAEE,IAAI,EAAElB,OAAO,CAACM,oBAAD,CAFf;QAGE,cAAc,EAAEE,cAHlB;QAIE,oBAAoB,EAAEF,oBAJxB;QAKE,OAAO,EAAEN,OALX;QAME,YAAY,EAAEuB,YANhB;QAOE,aAAa,EAAET,aAPjB;QAQE,YAAY,EAAEE;MARhB;QAAA;QAAA;QAAA;MAAA;IAFF;MAAA;MAAA;MAAA;IAAA,QALF;EAAA,gBADF;AAsBD;;GAlFQjB,G;;KAAAA,G;AAoFT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}